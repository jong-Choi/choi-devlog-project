
FROM node:20-alpine AS base

# 1단계 : 빌드
FROM base AS builder

WORKDIR /app

COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./

RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i; \
  else echo "Warning: Lockfile not found. It is recommended to commit lockfiles to version control." && yarn install; \
  fi

COPY . .

ARG NEXT_PUBLIC_ENV_VARIABLE
ENV NEXT_PUBLIC_ENV_VARIABLE=${NEXT_PUBLIC_ENV_VARIABLE}
ARG NEXT_PUBLIC_SUPABASE_URL
ENV NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
ARG NEXT_PUBLIC_SUPABASE_ANON_KEY
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
ARG SUPABASE_SERVICE_ROLE_KEY
ENV SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
ARG NEXT_PUBLIC_AUTH_REDIRECT_TO
ENV NEXT_PUBLIC_AUTH_REDIRECT_TO=${NEXT_PUBLIC_AUTH_REDIRECT_TO}
ARG NEXT_PUBLIC_BASE_URL
ENV NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
ARG OPENAI_API_KEY
ENV OPENAI_API_KEY=${OPENAI_API_KEY}
ARG LOGIN_PIN_NUMBER
ENV LOGIN_PIN_NUMBER=${LOGIN_PIN_NUMBER}
ARG NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT
ENV NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT=${NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT}
ARG VALID_USER_CREATED_AT
ENV VALID_USER_CREATED_AT=${VALID_USER_CREATED_AT}
ARG ORACLE_OLLAMA_HOST
ENV ORACLE_OLLAMA_HOST=${ORACLE_OLLAMA_HOST}
ARG LLM_SECRET_KEY
ENV LLM_SECRET_KEY=${LLM_SECRET_KEY}
ARG GOOGLE_SEARCH_API_KEY
ENV GOOGLE_SEARCH_API_KEY=${GOOGLE_SEARCH_API_KEY}
ARG GOOGLE_SEARCH_CX
ENV GOOGLE_SEARCH_CX=${GOOGLE_SEARCH_CX}

RUN \
  if [ -f yarn.lock ]; then yarn build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then pnpm build; \
  else npm run build; \
  fi


# 2단계: 프로덕션 이미지 실행
FROM base AS runner

WORKDIR /app

# nextjs 사용자 생성하여 실행
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

# standalone 모드에서 실행하고 public과 static 파일을 이미지로 복사.
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

ARG NEXT_PUBLIC_ENV_VARIABLE
ENV NEXT_PUBLIC_ENV_VARIABLE=${NEXT_PUBLIC_ENV_VARIABLE}
ARG NEXT_PUBLIC_SUPABASE_URL
ENV NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
ARG NEXT_PUBLIC_SUPABASE_ANON_KEY
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
ARG SUPABASE_SERVICE_ROLE_KEY
ENV SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
ARG NEXT_PUBLIC_AUTH_REDIRECT_TO
ENV NEXT_PUBLIC_AUTH_REDIRECT_TO=${NEXT_PUBLIC_AUTH_REDIRECT_TO}
ARG NEXT_PUBLIC_BASE_URL
ENV NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
ARG OPENAI_API_KEY
ENV OPENAI_API_KEY=${OPENAI_API_KEY}
ARG LOGIN_PIN_NUMBER
ENV LOGIN_PIN_NUMBER=${LOGIN_PIN_NUMBER}
ARG NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT
ENV NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT=${NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT}
ARG VALID_USER_CREATED_AT
ENV VALID_USER_CREATED_AT=${VALID_USER_CREATED_AT}

# 런타임에도 동일 키 주입
ARG ORACLE_OLLAMA_HOST
ENV ORACLE_OLLAMA_HOST=${ORACLE_OLLAMA_HOST}
ARG LLM_SECRET_KEY
ENV LLM_SECRET_KEY=${LLM_SECRET_KEY}
ARG GOOGLE_SEARCH_API_KEY
ENV GOOGLE_SEARCH_API_KEY=${GOOGLE_SEARCH_API_KEY}
ARG GOOGLE_SEARCH_CX
ENV GOOGLE_SEARCH_CX=${GOOGLE_SEARCH_CX}

CMD ["node", "server.js"]
